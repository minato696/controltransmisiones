#!/bin/bash

# Script de configuraci√≥n completa para Nginx + SSL
# Sistema EXITOSA Control de Transmisiones
# Dominio: controlt.exitosa.pe

DOMAIN="controlt.exitosa.pe"
APP_PORT="5885"
APP_IP="192.168.10.188"
SITE_NAME="exitosa-control-transmisiones"

echo "üöÄ Configurando Nginx + SSL para Sistema EXITOSA"
echo "================================================"
echo "Dominio: $DOMAIN"
echo "Backend: http://$APP_IP:$APP_PORT"
echo "Sitio: $SITE_NAME"
echo ""

# Funci√≥n para verificar si un comando existe
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "‚ùå $1 no est√° instalado"
        return 1
    else
        echo "‚úÖ $1 est√° disponible"
        return 0
    fi
}

# Funci√≥n para verificar el estado de un servicio
check_service() {
    if systemctl is-active --quiet $1; then
        echo "‚úÖ $1 est√° ejecut√°ndose"
        return 0
    else
        echo "‚ùå $1 no est√° ejecut√°ndose"
        return 1
    fi
}

# Verificar requisitos previos
echo "üîç Verificando requisitos previos..."
check_command nginx || { echo "Instala nginx: sudo apt install nginx"; exit 1; }
check_service nginx || { echo "Inicia nginx: sudo systemctl start nginx"; exit 1; }

# Verificar que la aplicaci√≥n est√© ejecut√°ndose
echo ""
echo "üîç Verificando aplicaci√≥n backend..."
if curl -s http://$APP_IP:$APP_PORT > /dev/null; then
    echo "‚úÖ Aplicaci√≥n backend responde en http://$APP_IP:$APP_PORT"
else
    echo "‚ùå Aplicaci√≥n backend no responde en http://$APP_IP:$APP_PORT"
    echo "   Verifica que pm2 est√© ejecutando la aplicaci√≥n"
    exit 1
fi

# Verificar resoluci√≥n DNS
echo ""
echo "üîç Verificando DNS..."
if nslookup $DOMAIN > /dev/null 2>&1; then
    echo "‚úÖ $DOMAIN resuelve correctamente"
    echo "   IP: $(nslookup $DOMAIN | grep -A1 'Name:' | tail -n1 | awk '{print $2}')"
else
    echo "‚ö†Ô∏è  $DOMAIN no resuelve o no apunta a este servidor"
    echo "   Aseg√∫rate de que el DNS est√© configurado correctamente"
    echo "   El certificado SSL fallar√° si el DNS no apunta aqu√≠"
fi

# Crear configuraci√≥n de nginx si no existe
echo ""
echo "üîß Creando configuraci√≥n de nginx..."
sudo tee /etc/nginx/sites-available/$SITE_NAME > /dev/null << 'EOF'
# Configuraci√≥n Nginx para Sistema EXITOSA Control de Transmisiones
# Proxy inverso: controlt.exitosa.pe -> http://192.168.10.188:5885

server {
    listen 80;
    listen [::]:80;
    server_name controlt.exitosa.pe;

    # Logs espec√≠ficos para el sitio
    access_log /var/log/nginx/exitosa-control-access.log;
    error_log /var/log/nginx/exitosa-control-error.log;

    # Configuraci√≥n del proxy inverso
    location / {
        proxy_pass http://192.168.10.188:5885;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Configuraci√≥n para aplicaciones React
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Headers adicionales para CORS si es necesario
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
    }

    # Configuraci√≥n para archivos est√°ticos
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        proxy_pass http://192.168.10.188:5885;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache para archivos est√°ticos
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Bloquear acceso a archivos sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

echo "‚úÖ Configuraci√≥n de nginx creada"

# Crear backup de configuraci√≥n existente si existe
if [ -f "/etc/nginx/sites-available/$SITE_NAME" ]; then
    echo ""
    echo "üìã Configuraci√≥n de nginx encontrada"
fi

# Habilitar el sitio
echo ""
echo "üîß Habilitando sitio en nginx..."
sudo ln -sf /etc/nginx/sites-available/$SITE_NAME /etc/nginx/sites-enabled/
echo "‚úÖ Sitio habilitado"

# Verificar configuraci√≥n de nginx
echo ""
echo "üîç Verificando configuraci√≥n de nginx..."
if sudo nginx -t; then
    echo "‚úÖ Configuraci√≥n de nginx v√°lida"
else
    echo "‚ùå Error en configuraci√≥n de nginx"
    exit 1
fi

# Recargar nginx
echo ""
echo "üîÑ Recargando nginx..."
sudo systemctl reload nginx
echo "‚úÖ Nginx recargado"

# Verificar que el sitio HTTP funciona
echo ""
echo "üîç Verificando acceso HTTP..."
sleep 2
if curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN | grep -q "200\|301\|302"; then
    echo "‚úÖ Sitio HTTP accesible en http://$DOMAIN"
else
    echo "‚ö†Ô∏è  Sitio HTTP no responde correctamente"
    echo "   Verifica la configuraci√≥n y DNS"
fi

# Instalar certbot si no est√° instalado
echo ""
echo "üì¶ Verificando/Instalando certbot..."
if ! check_command certbot; then
    echo "üì¶ Instalando certbot..."
    sudo apt update
    sudo apt install -y certbot python3-certbot-nginx
    echo "‚úÖ Certbot instalado"
fi

echo ""
echo "üéØ Configuraci√≥n b√°sica completada"
echo ""
echo "üìã Pr√≥ximos pasos:"
echo "1. Verifica que http://$DOMAIN funcione"
echo "2. Ejecuta el comando SSL cuando el DNS est√© listo:"
echo ""
echo "   sudo certbot --nginx -d $DOMAIN"
echo ""
echo "üîó URLs:"
echo "   HTTP:  http://$DOMAIN"
echo "   HTTPS: https://$DOMAIN (despu√©s del SSL)"
echo "   App:   http://$APP_IP:$APP_PORT (directo)"
echo ""

# Si se pasa el par√°metro 'ssl', configurar SSL autom√°ticamente
if [ "$1" = "ssl" ]; then
    echo "üîí Configurando SSL autom√°ticamente..."
    echo ""
    
    # Verificar DNS antes de continuar
    CURRENT_IP=$(curl -s ifconfig.me)
    DOMAIN_IP=$(nslookup $DOMAIN | grep -A1 'Name:' | tail -n1 | awk '{print $2}' 2>/dev/null)
    
    if [ "$CURRENT_IP" = "$DOMAIN_IP" ]; then
        echo "‚úÖ DNS verificado: $DOMAIN apunta a $CURRENT_IP"
        echo ""
        echo "üîí Generando certificado SSL..."
        echo "   (Puede tomar unos minutos)"
        
        # Generar certificado SSL
        sudo certbot --nginx -d $DOMAIN --non-interactive --agree-tos --email admin@exitosa.pe --redirect
        
        if [ $? -eq 0 ]; then
            echo ""
            echo "üéâ ¬°SSL configurado exitosamente!"
            echo ""
            echo "‚úÖ Certificado SSL instalado"
            echo "‚úÖ Redirecci√≥n HTTP -> HTTPS habilitada"
            echo "‚úÖ Auto-renovaci√≥n configurada"
            echo ""
            echo "üîó Tu sitio est√° disponible en:"
            echo "   https://$DOMAIN"
            
        else
            echo ""
            echo "‚ùå Error al generar certificado SSL"
            echo "   Verifica que:"
            echo "   - El DNS apunte correctamente a este servidor"
            echo "   - Los puertos 80 y 443 est√©n abiertos"
        fi
    else
        echo "‚ùå DNS no apunta a este servidor"
        echo "   Servidor actual: $CURRENT_IP"
        echo "   DNS apunta a: $DOMAIN_IP"
        echo "   Configura el DNS antes de generar SSL"
    fi
fi

echo ""
echo "üìä Estado final:"
sudo systemctl status nginx --no-pager -l
